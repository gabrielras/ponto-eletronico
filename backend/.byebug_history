continue
schedule.attributes.except('id', 'created_at', 'updated_at')c
schedule.attributes.except('id', :created_at, :updated_at, :email)
schedule.attributes.except(:id, :created_at, :updated_at, :email)
continue
user.role.schedules.last.attributes
user.role.schedules.last.attribute
user.role.schedules.methods
user.role.schedules.to_s
user.role.schedules.to_hash
user.role.schedules.to_a
user.role.schedules.to_h
user.role.schedules.attributes
user.role.schedules.attributeS
user.role.schedules.attribute
user.role.schedules
user.role.schedules.attributes
user.role.schedules
continue
attributes
Schedule.create!(attributes.except(:email).merge(role: user.role, start_date: Time.zone.now, closing_date: (Time.zone.now + 5.year)))
attributes
continue
@user = User.joins(:role).where(role: {company_id: current_user.role.company_id }).find(params[:id])
current_user
@user
continue
user
continue
user
continue
error
next
Role.create!(user: collaborator, company_id: user.role.company_id, role_type: 'collaborator_pending')
Role.all
continue
next
Schedule.joins(:role).where(role: { user_id: user.id }).where('schedules.closing_date >= ?', date).where('schedules.start_date >= ?', date).where("schedules.#{date.strftime('%A').downcase} = ?", true)
continue
date
data
continue
date
date.strftime('%A').downcase
Schedule.joins(:role).where(role: { user_id: user.id }).where('schedules.closing_date >= ?', date).where('schedules.start_date >= ?', date).where("schedules.#{date.strftime('%A').downcase} = ?", true)
Schedule.joins(:role).where(role: { user_id: user.id }).where('schedules.closing_date >= ?', date).where('schedules.start_date >= ?', date).where("schedules.#{date.strftime('%A').downcase} = ?", false)
continue
Schedule.joins(:role).where(role: { user_id: user.id }).where('schedules.closing_date >= ?', date).where('schedules.start_date >= ?', date).where("schedules.#{date.strftime('%A').downcase} = ?", false)
Schedule.joins(:role).where(role: { user_id: user.id }).where('schedules.closing_date >= ?', date).where('schedules.start_date >= ?', date).where("schedules.#{date.strftime('%A').downcase} = ?", true)
Schedule.joins(:role).where(role: { user_id: user.id }).where('schedules.closing_date >= ?', date).where('schedules.start_date >= ?', date)
Schedule.joins(:role).where(role: { user_id: user.id }).where('schedules.closing_date >= ?', date).where('schedules.start_date <= ?', date)
Schedule.joins(:role).where(role: { user_id: user.id }).where('schedules.closing_date >= ?', date)
Schedule.joins(:role).where(role: { user_id: user.id }).where('closing_date >= ?', date)
Schedule.joins(:role).where(role: { user_id: user.id }).where('closing_date <= ?', date)
date
Schedule.joins(:role).where(role: { user_id: user.id }).where('schedules.closing_date <= ?', date)
Schedule.joins(:role).where(role: { user_id: user.id })
continue
@date.strftime('%A').downcase
@date = params[:data].present? ? Date.parse(Time.zone.now.to_date.to_s) : Date.parse(params[:data])
Time.zone.now.to_date.to_s
Date.parse(Time.zone.now)
Date.parse(params[:data]).class
Date.parse(params[:data])
params[:data]
@date.class
@date.type?
@date
next
continue
next
continue
jwt_payload.first['email']
jwt_payload.take['email']
jwt_payload.take.['email']
jwt_payload.take['email']
jwt_payload.first[:email]
jwt_payload.first[:email
jwt_payload.first
jwt_payload
continue
jwt_payload
User.find_by_email(jwt_payload['email'])
next
continue
next
authenticate_or_request_with_http_token
next
